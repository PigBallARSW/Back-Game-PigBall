name: SonarCloud Analysis

on:
  workflow_call:
    inputs:
      java-version:
        required: false
        type: string
        default: '21'
      branch-name:
        required: false
        type: string
        default: 'main'
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_ORGANIZATION:
        required: true
      SONAR_PROJECT_KEY:
        required: true

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest

    # ----- aquí agregas Redis como servicio -----
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    # --------------------------------------------

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ inputs.java-version }}

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Opcional: exporta las vars para que tu app use este Redis
      - name: Export Redis env
        run: |
          echo "REDIS_HOST=redis" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV
          echo "APP_STORE_TYPE=memory" >> $GITHUB_ENV

      - name: Build with JaCoCo and analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          # aquí también puedes exponer REDIS_* si tu test los necesita:
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}
          APP_STORE_TYPE: ${{ env.APP_STORE_TYPE }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.organization=$SONAR_ORGANIZATION \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.branch.name=${{ inputs.branch-name }} \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      - name: Wait for SonarCloud Quality Gate
        run: |
          sleep 20
          SONAR_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" | jq -r .projectStatus.status)
          echo "SonarCloud Quality Gate Status: $SONAR_STATUS"
          if [[ "$SONAR_STATUS" != "OK" ]]; then
            echo "❌ Quality Gate failed. PR cannot be merged."
            exit 1
          fi
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
